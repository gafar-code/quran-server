// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: surah.sql

package db

import (
	"context"
)

const createSurah = `-- name: CreateSurah :one

INSERT INTO
    surah (
        page,
        ar,
        tr,
        idn,
        number,
        type,
        total_ayah
    )
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, page, ar, number, tr, idn, type, total_ayah, created_at
`

type CreateSurahParams struct {
	Page      int64  `json:"page"`
	Ar        string `json:"ar"`
	Tr        string `json:"tr"`
	Idn       string `json:"idn"`
	Number    int64  `json:"number"`
	Type      string `json:"type"`
	TotalAyah int64  `json:"total_ayah"`
}

func (q *Queries) CreateSurah(ctx context.Context, arg CreateSurahParams) (Surah, error) {
	row := q.db.QueryRowContext(ctx, createSurah,
		arg.Page,
		arg.Ar,
		arg.Tr,
		arg.Idn,
		arg.Number,
		arg.Type,
		arg.TotalAyah,
	)
	var i Surah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Ar,
		&i.Number,
		&i.Tr,
		&i.Idn,
		&i.Type,
		&i.TotalAyah,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSurah = `-- name: DeleteSurah :exec

DELETE FROM surah WHERE id = $1
`

func (q *Queries) DeleteSurah(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSurah, id)
	return err
}

const getSurah = `-- name: GetSurah :one

SELECT id, page, ar, number, tr, idn, type, total_ayah, created_at FROM surah WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSurah(ctx context.Context, id int64) (Surah, error) {
	row := q.db.QueryRowContext(ctx, getSurah, id)
	var i Surah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Ar,
		&i.Number,
		&i.Tr,
		&i.Idn,
		&i.Type,
		&i.TotalAyah,
		&i.CreatedAt,
	)
	return i, err
}

const getSurahByNumber = `-- name: GetSurahByNumber :one

SELECT id, page, ar, number, tr, idn, type, total_ayah, created_at FROM surah WHERE number = $1 LIMIT 1
`

func (q *Queries) GetSurahByNumber(ctx context.Context, number int64) (Surah, error) {
	row := q.db.QueryRowContext(ctx, getSurahByNumber, number)
	var i Surah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Ar,
		&i.Number,
		&i.Tr,
		&i.Idn,
		&i.Type,
		&i.TotalAyah,
		&i.CreatedAt,
	)
	return i, err
}

const listSurah = `-- name: ListSurah :many

SELECT id, page, ar, number, tr, idn, type, total_ayah, created_at FROM surah ORDER BY id LIMIT $1 OFFSET $2
`

type ListSurahParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSurah(ctx context.Context, arg ListSurahParams) ([]Surah, error) {
	rows, err := q.db.QueryContext(ctx, listSurah, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Surah{}
	for rows.Next() {
		var i Surah
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.Ar,
			&i.Number,
			&i.Tr,
			&i.Idn,
			&i.Type,
			&i.TotalAyah,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurahByPage = `-- name: ListSurahByPage :many

SELECT id, page, ar, number, tr, idn, type, total_ayah, created_at FROM surah WHERE page = $1
`

func (q *Queries) ListSurahByPage(ctx context.Context, page int64) ([]Surah, error) {
	rows, err := q.db.QueryContext(ctx, listSurahByPage, page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Surah{}
	for rows.Next() {
		var i Surah
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.Ar,
			&i.Number,
			&i.Tr,
			&i.Idn,
			&i.Type,
			&i.TotalAyah,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSurah = `-- name: UpdateSurah :one

UPDATE surah
SET
    page = $2,
    ar = $3,
    tr = $4,
    idn = $5,
    number = $6,
    type = $7,
    total_ayah = $8
WHERE id = $1 RETURNING id, page, ar, number, tr, idn, type, total_ayah, created_at
`

type UpdateSurahParams struct {
	ID        int64  `json:"id"`
	Page      int64  `json:"page"`
	Ar        string `json:"ar"`
	Tr        string `json:"tr"`
	Idn       string `json:"idn"`
	Number    int64  `json:"number"`
	Type      string `json:"type"`
	TotalAyah int64  `json:"total_ayah"`
}

func (q *Queries) UpdateSurah(ctx context.Context, arg UpdateSurahParams) (Surah, error) {
	row := q.db.QueryRowContext(ctx, updateSurah,
		arg.ID,
		arg.Page,
		arg.Ar,
		arg.Tr,
		arg.Idn,
		arg.Number,
		arg.Type,
		arg.TotalAyah,
	)
	var i Surah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Ar,
		&i.Number,
		&i.Tr,
		&i.Idn,
		&i.Type,
		&i.TotalAyah,
		&i.CreatedAt,
	)
	return i, err
}

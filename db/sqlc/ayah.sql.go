// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ayah.sql

package db

import (
	"context"
)

const createAyah = `-- name: CreateAyah :one

INSERT INTO
    ayah (
        page,
        surah_number,
        number,
        number_in_surah,
        ar,
        tr,
        idn,
        audio_url
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, page, surah_number, number, number_in_surah, ar, tr, idn, audio_url, created_at
`

type CreateAyahParams struct {
	Page          int64  `json:"page"`
	SurahNumber   int64  `json:"surah_number"`
	Number        int64  `json:"number"`
	NumberInSurah int64  `json:"number_in_surah"`
	Ar            string `json:"ar"`
	Tr            string `json:"tr"`
	Idn           string `json:"idn"`
	AudioUrl      string `json:"audio_url"`
}

func (q *Queries) CreateAyah(ctx context.Context, arg CreateAyahParams) (Ayah, error) {
	row := q.db.QueryRowContext(ctx, createAyah,
		arg.Page,
		arg.SurahNumber,
		arg.Number,
		arg.NumberInSurah,
		arg.Ar,
		arg.Tr,
		arg.Idn,
		arg.AudioUrl,
	)
	var i Ayah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.SurahNumber,
		&i.Number,
		&i.NumberInSurah,
		&i.Ar,
		&i.Tr,
		&i.Idn,
		&i.AudioUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAyah = `-- name: DeleteAyah :exec

DELETE FROM ayah WHERE id = $1
`

func (q *Queries) DeleteAyah(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAyah, id)
	return err
}

const getAyah = `-- name: GetAyah :one

SELECT id, page, surah_number, number, number_in_surah, ar, tr, idn, audio_url, created_at FROM ayah WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAyah(ctx context.Context, id int64) (Ayah, error) {
	row := q.db.QueryRowContext(ctx, getAyah, id)
	var i Ayah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.SurahNumber,
		&i.Number,
		&i.NumberInSurah,
		&i.Ar,
		&i.Tr,
		&i.Idn,
		&i.AudioUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getAyahForUpdate = `-- name: GetAyahForUpdate :one

SELECT id, page, surah_number, number, number_in_surah, ar, tr, idn, audio_url, created_at FROM ayah WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetAyahForUpdate(ctx context.Context, id int64) (Ayah, error) {
	row := q.db.QueryRowContext(ctx, getAyahForUpdate, id)
	var i Ayah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.SurahNumber,
		&i.Number,
		&i.NumberInSurah,
		&i.Ar,
		&i.Tr,
		&i.Idn,
		&i.AudioUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listAllAyah = `-- name: ListAllAyah :many

SELECT id, page, surah_number, number, number_in_surah, ar, tr, idn, audio_url, created_at FROM ayah ORDER BY id LIMIT $1 OFFSET $2
`

type ListAllAyahParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllAyah(ctx context.Context, arg ListAllAyahParams) ([]Ayah, error) {
	rows, err := q.db.QueryContext(ctx, listAllAyah, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ayah{}
	for rows.Next() {
		var i Ayah
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.SurahNumber,
			&i.Number,
			&i.NumberInSurah,
			&i.Ar,
			&i.Tr,
			&i.Idn,
			&i.AudioUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAyahByPage = `-- name: ListAyahByPage :many

SELECT id, page, surah_number, number, number_in_surah, ar, tr, idn, audio_url, created_at FROM ayah WHERE page = $1
`

func (q *Queries) ListAyahByPage(ctx context.Context, page int64) ([]Ayah, error) {
	rows, err := q.db.QueryContext(ctx, listAyahByPage, page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ayah{}
	for rows.Next() {
		var i Ayah
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.SurahNumber,
			&i.Number,
			&i.NumberInSurah,
			&i.Ar,
			&i.Tr,
			&i.Idn,
			&i.AudioUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAyah = `-- name: UpdateAyah :one

UPDATE ayah
SET
    page = $2,
    surah_number = $3,
    number = $4,
    ar = $5,
    tr = $6,
    idn = $7,
    audio_url = $8,
    number_in_surah = $9
WHERE id = $1 RETURNING id, page, surah_number, number, number_in_surah, ar, tr, idn, audio_url, created_at
`

type UpdateAyahParams struct {
	ID            int64  `json:"id"`
	Page          int64  `json:"page"`
	SurahNumber   int64  `json:"surah_number"`
	Number        int64  `json:"number"`
	Ar            string `json:"ar"`
	Tr            string `json:"tr"`
	Idn           string `json:"idn"`
	AudioUrl      string `json:"audio_url"`
	NumberInSurah int64  `json:"number_in_surah"`
}

func (q *Queries) UpdateAyah(ctx context.Context, arg UpdateAyahParams) (Ayah, error) {
	row := q.db.QueryRowContext(ctx, updateAyah,
		arg.ID,
		arg.Page,
		arg.SurahNumber,
		arg.Number,
		arg.Ar,
		arg.Tr,
		arg.Idn,
		arg.AudioUrl,
		arg.NumberInSurah,
	)
	var i Ayah
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.SurahNumber,
		&i.Number,
		&i.NumberInSurah,
		&i.Ar,
		&i.Tr,
		&i.Idn,
		&i.AudioUrl,
		&i.CreatedAt,
	)
	return i, err
}
